// - $spinnerTrigger - which element should trigger the spinner visibility
// - options: - additional options
//      - blockTrigger - if trigger should be blocked - default true
//      - additionalElements: - array of elements to show spinner on
//          - $element - on which element the spinner should be shown
//          - processingMessage - message to show on blocked element
//      - validationFunc - spinner will show only when validationFunc returns true
//      - hideSpinnerPromise - promise when spinner should be hidden
//      - spinnerShownCallback - callback when element is shown
function showSpinnerOnClick($spinnerTrigger, options) {
    $spinnerTrigger.click(function () {
        if (typeof options.validationFunc !== 'function' || options.validationFunc() !== true) {
            return;
        }

        const spinnerClasses = 'kt-spinner kt-spinner--lg kt-spinner--light';

        if (options.blockTrigger !== false) {
            $spinnerTrigger.addClass(spinnerClasses);
            $spinnerTrigger.prop('disabled', true);

            if (options.hideSpinnerPromise instanceof Promise) {
                options.hideSpinnerPromise.then(() => {
                     $spinnerTrigger.removeClass(spinnerClasses);
                     $spinnerTrigger.prop('disabled', false);
                 });
            }
        }

        const additionalElements = options.additionalElements;
        if (additionalElements && Array.isArray(additionalElements)) {
            for (const additionalElement of additionalElements) {
                const blockOptions = {
                    opacity: 0.1,
                    overlayColor: '#000000',
                    type: 'v2',
                    state: 'primary'
                };

                if (additionalElement.processingMessage) {
                    blockOptions.message = additionalElement.processingMessage;
                }

                KTApp.block(additionalElement.$element, blockOptions);

                if (options.hideSpinnerPromise instanceof Promise) {
                    options.hideSpinnerPromise.then(() => KTApp.unblock(additionalElement.$element));
                }
            }
        }
        
        if (typeof options.spinnerShownCallback === 'function') {
            options.spinnerShownCallback();
        }
    });
}
